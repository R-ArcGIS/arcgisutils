[{"path":"/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"Apache License","title":"Apache License","text":"Version 2.0, January 2004 <http://www.apache.org/licenses/>","code":""},{"path":[]},{"path":"/LICENSE.html","id":"id_1-definitions","dir":"","previous_headings":"Terms and Conditions for use, reproduction, and distribution","what":"1. Definitions","title":"Apache License","text":"“License” shall mean terms conditions use, reproduction, distribution defined Sections 1 9 document. “Licensor” shall mean copyright owner entity authorized copyright owner granting License. “Legal Entity” shall mean union acting entity entities control, controlled , common control entity. purposes definition, “control” means () power, direct indirect, cause direction management entity, whether contract otherwise, (ii) ownership fifty percent (50%) outstanding shares, (iii) beneficial ownership entity. “” (“”) shall mean individual Legal Entity exercising permissions granted License. “Source” form shall mean preferred form making modifications, including limited software source code, documentation source, configuration files. “Object” form shall mean form resulting mechanical transformation translation Source form, including limited compiled object code, generated documentation, conversions media types. “Work” shall mean work authorship, whether Source Object form, made available License, indicated copyright notice included attached work (example provided Appendix ). “Derivative Works” shall mean work, whether Source Object form, based (derived ) Work editorial revisions, annotations, elaborations, modifications represent, whole, original work authorship. purposes License, Derivative Works shall include works remain separable , merely link (bind name) interfaces , Work Derivative Works thereof. “Contribution” shall mean work authorship, including original version Work modifications additions Work Derivative Works thereof, intentionally submitted Licensor inclusion Work copyright owner individual Legal Entity authorized submit behalf copyright owner. purposes definition, “submitted” means form electronic, verbal, written communication sent Licensor representatives, including limited communication electronic mailing lists, source code control systems, issue tracking systems managed , behalf , Licensor purpose discussing improving Work, excluding communication conspicuously marked otherwise designated writing copyright owner “Contribution.” “Contributor” shall mean Licensor individual Legal Entity behalf Contribution received Licensor subsequently incorporated within Work.","code":""},{"path":"/LICENSE.html","id":"id_2-grant-of-copyright-license","dir":"","previous_headings":"Terms and Conditions for use, reproduction, and distribution","what":"2. Grant of Copyright License","title":"Apache License","text":"Subject terms conditions License, Contributor hereby grants perpetual, worldwide, non-exclusive, -charge, royalty-free, irrevocable copyright license reproduce, prepare Derivative Works , publicly display, publicly perform, sublicense, distribute Work Derivative Works Source Object form.","code":""},{"path":"/LICENSE.html","id":"id_3-grant-of-patent-license","dir":"","previous_headings":"Terms and Conditions for use, reproduction, and distribution","what":"3. Grant of Patent License","title":"Apache License","text":"Subject terms conditions License, Contributor hereby grants perpetual, worldwide, non-exclusive, -charge, royalty-free, irrevocable (except stated section) patent license make, made, use, offer sell, sell, import, otherwise transfer Work, license applies patent claims licensable Contributor necessarily infringed Contribution(s) alone combination Contribution(s) Work Contribution(s) submitted. institute patent litigation entity (including cross-claim counterclaim lawsuit) alleging Work Contribution incorporated within Work constitutes direct contributory patent infringement, patent licenses granted License Work shall terminate date litigation filed.","code":""},{"path":"/LICENSE.html","id":"id_4-redistribution","dir":"","previous_headings":"Terms and Conditions for use, reproduction, and distribution","what":"4. Redistribution","title":"Apache License","text":"may reproduce distribute copies Work Derivative Works thereof medium, without modifications, Source Object form, provided meet following conditions: () must give recipients Work Derivative Works copy License; (b) must cause modified files carry prominent notices stating changed files; (c) must retain, Source form Derivative Works distribute, copyright, patent, trademark, attribution notices Source form Work, excluding notices pertain part Derivative Works; (d) Work includes “NOTICE” text file part distribution, Derivative Works distribute must include readable copy attribution notices contained within NOTICE file, excluding notices pertain part Derivative Works, least one following places: within NOTICE text file distributed part Derivative Works; within Source form documentation, provided along Derivative Works; , within display generated Derivative Works, wherever third-party notices normally appear. contents NOTICE file informational purposes modify License. may add attribution notices within Derivative Works distribute, alongside addendum NOTICE text Work, provided additional attribution notices construed modifying License. may add copyright statement modifications may provide additional different license terms conditions use, reproduction, distribution modifications, Derivative Works whole, provided use, reproduction, distribution Work otherwise complies conditions stated License.","code":""},{"path":"/LICENSE.html","id":"id_5-submission-of-contributions","dir":"","previous_headings":"Terms and Conditions for use, reproduction, and distribution","what":"5. Submission of Contributions","title":"Apache License","text":"Unless explicitly state otherwise, Contribution intentionally submitted inclusion Work Licensor shall terms conditions License, without additional terms conditions. Notwithstanding , nothing herein shall supersede modify terms separate license agreement may executed Licensor regarding Contributions.","code":""},{"path":"/LICENSE.html","id":"id_6-trademarks","dir":"","previous_headings":"Terms and Conditions for use, reproduction, and distribution","what":"6. Trademarks","title":"Apache License","text":"License grant permission use trade names, trademarks, service marks, product names Licensor, except required reasonable customary use describing origin Work reproducing content NOTICE file.","code":""},{"path":"/LICENSE.html","id":"id_7-disclaimer-of-warranty","dir":"","previous_headings":"Terms and Conditions for use, reproduction, and distribution","what":"7. Disclaimer of Warranty","title":"Apache License","text":"Unless required applicable law agreed writing, Licensor provides Work (Contributor provides Contributions) “” BASIS, WITHOUT WARRANTIES CONDITIONS KIND, either express implied, including, without limitation, warranties conditions TITLE, NON-INFRINGEMENT, MERCHANTABILITY, FITNESS PARTICULAR PURPOSE. solely responsible determining appropriateness using redistributing Work assume risks associated exercise permissions License.","code":""},{"path":"/LICENSE.html","id":"id_8-limitation-of-liability","dir":"","previous_headings":"Terms and Conditions for use, reproduction, and distribution","what":"8. Limitation of Liability","title":"Apache License","text":"event legal theory, whether tort (including negligence), contract, otherwise, unless required applicable law (deliberate grossly negligent acts) agreed writing, shall Contributor liable damages, including direct, indirect, special, incidental, consequential damages character arising result License use inability use Work (including limited damages loss goodwill, work stoppage, computer failure malfunction, commercial damages losses), even Contributor advised possibility damages.","code":""},{"path":"/LICENSE.html","id":"id_9-accepting-warranty-or-additional-liability","dir":"","previous_headings":"Terms and Conditions for use, reproduction, and distribution","what":"9. Accepting Warranty or Additional Liability","title":"Apache License","text":"redistributing Work Derivative Works thereof, may choose offer, charge fee , acceptance support, warranty, indemnity, liability obligations /rights consistent License. However, accepting obligations, may act behalf sole responsibility, behalf Contributor, agree indemnify, defend, hold Contributor harmless liability incurred , claims asserted , Contributor reason accepting warranty additional liability. END TERMS CONDITIONS","code":""},{"path":"/LICENSE.html","id":"appendix-how-to-apply-the-apache-license-to-your-work","dir":"","previous_headings":"","what":"APPENDIX: How to apply the Apache License to your work","title":"Apache License","text":"apply Apache License work, attach following boilerplate notice, fields enclosed brackets [] replaced identifying information. (Don’t include brackets!) text enclosed appropriate comment syntax file format. also recommend file class name description purpose included “printed page” copyright notice easier identification within third-party archives.","code":"Copyright [yyyy] [name of copyright owner]  Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with the License. You may obtain a copy of the License at    http://www.apache.org/licenses/LICENSE-2.0  Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language governing permissions and limitations under the License."},{"path":"/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Josiah Parry. Author, maintainer.","code":""},{"path":"/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Parry J (2023). arcgisutils: ArcGIS Utility Functions. R package version 0.1.0, https://r.esri.com/arcgisutils/, https://github.com/R-ArcGIS/arcgisutils.","code":"@Manual{,   title = {arcgisutils: ArcGIS Utility Functions},   author = {Josiah Parry},   year = {2023},   note = {R package version 0.1.0, https://r.esri.com/arcgisutils/},   url = {https://github.com/R-ArcGIS/arcgisutils}, }"},{"path":"/index.html","id":"arcgisutils","dir":"","previous_headings":"","what":"ArcGIS Utility Functions","title":"ArcGIS Utility Functions","text":"arcgisutils developer oriented package provides basic functions build R packages work ArcGIS Location Services. provides functionality authorization, Esri JSON construction parsing, well utilities pertianing geometry Esri type conversions.","code":""},{"path":"/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"ArcGIS Utility Functions","text":"can install development version arcgisutils GitHub :","code":"# install.packages(\"remotes\") remotes::install_github(\"R-ArcGIS/arcgisutils\")"},{"path":"/reference/arc_host.html","id":null,"dir":"Reference","previous_headings":"","what":"Determines Portal Host — arc_host","title":"Determines Portal Host — arc_host","text":"Returns scalar character indicating host make requests .","code":""},{"path":"/reference/arc_host.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Determines Portal Host — arc_host","text":"","code":"arc_host()"},{"path":"/reference/arc_host.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Determines Portal Host — arc_host","text":"scalar character, \"https://www.arcgis.com\" default.","code":""},{"path":"/reference/arc_host.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Determines Portal Host — arc_host","text":"default, host ArcGIS Online <https://www.arcgis.com>. environment variable ARCGIS_HOST set, returned.","code":""},{"path":"/reference/arc_host.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Determines Portal Host — arc_host","text":"","code":"arc_host() #> [1] \"https://www.arcgis.com\""},{"path":"/reference/as_extent.html","id":null,"dir":"Reference","previous_headings":"","what":"Convert an object to an extent — as_extent","title":"Convert an object to an extent — as_extent","text":"Given sf sfc object create list represents extent object. result function can parsed directly json using jsonify::to_json(x, unbox = TRUE) included list extent component eventually converted json using function.","code":""},{"path":"/reference/as_extent.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convert an object to an extent — as_extent","text":"","code":"as_extent(x, crs = sf::st_crs(x))"},{"path":"/reference/as_extent.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convert an object to an extent — as_extent","text":"x sf sfc object crs CRS object. Must parsible sf::st_crs()","code":""},{"path":"/reference/as_extent.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Convert an object to an extent — as_extent","text":"extent json object. Use jsonify::to_json(x, unbox = TRUE) convert json.","code":""},{"path":"/reference/as_extent.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Convert an object to an extent — as_extent","text":"","code":"nc <- sf::st_read(system.file(\"shape/nc.shp\", package = \"sf\"), quiet = TRUE) as_extent(nc) #> $xmin #> [1] -84.32385 #>  #> $ymin #> [1] 33.88199 #>  #> $xmax #> [1] -75.45698 #>  #> $ymax #> [1] 36.58965 #>  #> $spatialReference #> $spatialReference$wkid #> [1] 4267 #>  #>"},{"path":"/reference/auth.html","id":null,"dir":"Reference","previous_headings":"","what":"Authorization — auth_code","title":"Authorization — auth_code","text":"Authorize R session connect ArcGIS Portal. See details.","code":""},{"path":"/reference/auth.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Authorization — auth_code","text":"","code":"auth_code(client = Sys.getenv(\"ARCGIS_CLIENT\"), host = arc_host())  auth_client(   client = Sys.getenv(\"ARCGIS_CLIENT\"),   secret = Sys.getenv(\"ARCGIS_SECRET\"),   host = arc_host(),   expiration = 120 )  auth_binding()  auth_user(   username = Sys.getenv(\"ARCGIS_USER\"),   password = Sys.getenv(\"ARCGIS_PASSWORD\"),   host = arc_host(),   expiration = 60 )  set_auth_token(token, quietly = FALSE)  refresh_token(token, client = Sys.getenv(\"ARCGIS_CLIENT\"), host = arc_host())  validate_or_refresh_token(   token,   client = Sys.getenv(\"ARCGIS_CLIENT\"),   host = arc_host(),   refresh_threshold = 0 )"},{"path":"/reference/auth.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Authorization — auth_code","text":"client OAuth 2.0 developer application client ID. default uses environment variable ARCGIS_CLIENT. host default \"https://www.arcgis.com\" secret OAuth 2.0 developer application secret. default uses environment variable ARCGIS_SECRET. expiration duration token minutes. username default Sys.getenv(\"ARCGIS_USER\"). username login. hard code value. password default Sys.getenv(\"ARCGIS_PASSWORD\"). password login. hard code value. token object class httr2_token generated auth_code() auth_client(). quietly default FALSE. Whether function verbose. refresh_threshold default 0. token expiry within threshold (seconds) token refreshed refresh_token available. Token refreshing possible auth_code() flow.","code":""},{"path":"/reference/auth.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Authorization — auth_code","text":"httr2_token","code":""},{"path":"/reference/auth.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Authorization — auth_code","text":"ArcGIS Online Enterprise Portals utilize OAuth2 authorization via REST APIs. configuring OAuth2 authorization see authorization article. auth_code() recommend OAuth2 workflow interactive sessions auth_client() recommended OAuth2 workflow non-interactive sessions auth_user() uses legacy username password authorization using generateToken endpoint. recommended legacy systems implement OAuth2. auth_binding() fetches token active portal set arcgisbinding. Uses arcgisbinding::arc.check_portal() extract authorization token. Recommended using arcgisbinding.","code":""},{"path":"/reference/auth.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Authorization — auth_code","text":"","code":"if (interactive()) {   auth_code()   auth_client()   auth_user()   auth_binding() }"},{"path":"/reference/dates.html","id":null,"dir":"Reference","previous_headings":"","what":"Date handling — is_date","title":"Date handling — is_date","text":"Esri date fields represented milliseconds Unix Epoch.","code":""},{"path":"/reference/dates.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Date handling — is_date","text":"","code":"is_date(x, tz)  date_to_ms(x, tz = \"UTC\")  from_esri_date(x)"},{"path":"/reference/dates.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Date handling — is_date","text":"x object class Date POSIXt. case is_date(), R object. tz character string.  time zone specification used     conversion, one required.  System-specific (see     time zones), \"\" current time zone,     \"GMT\" UTC (Universal Time, Coordinated).  Invalid values     commonly treated UTC, platforms warning.","code":""},{"path":"/reference/dates.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Date handling — is_date","text":"is_date() returns logical scalar date_to_ms() returns numeric vector times milliseconds Unix Epoch specified time zone.","code":""},{"path":"/reference/dates.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Date handling — is_date","text":"is_date(): checks object Date POSIXt class object. date_to_ms() converts date object milliseconds Unix Epoch specified time zone.","code":""},{"path":"/reference/dates.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Date handling — is_date","text":"","code":"today <- Sys.Date()  is_date(today) #> [1] TRUE  today_ms <- date_to_ms(today)  as.POSIXct(today_ms / 1000) #> [1] \"2023-12-01 UTC\""},{"path":"/reference/detect_errors.html","id":null,"dir":"Reference","previous_headings":"","what":"Detect errors in parsed json response — detect_errors","title":"Detect errors in parsed json response — detect_errors","text":"requests responses ArcGIS return status code response rather body json. function checks existence error. found contents error message bubbled .","code":""},{"path":"/reference/detect_errors.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Detect errors in parsed json response — detect_errors","text":"","code":"detect_errors(response, error_call = rlang::caller_env())"},{"path":"/reference/detect_errors.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Detect errors in parsed json response — detect_errors","text":"response httr2::response object. error_call default rlang::caller_env(). environment throw error .","code":""},{"path":"/reference/detect_errors.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Detect errors in parsed json response — detect_errors","text":"Nothing. Used side effect. error code encountered response error thrown error code error message.","code":""},{"path":"/reference/detect_errors.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Detect errors in parsed json response — detect_errors","text":"","code":"if (interactive()) {   response <- list(     error = list(       code = 400L,       message = \"Unable to generate token.\",       details = \"Invalid username or password.\"     )   )    detect_errors(response) }"},{"path":"/reference/determine_dims.html","id":null,"dir":"Reference","previous_headings":"","what":"Determine the dimensions of a geometry object — determine_dims","title":"Determine the dimensions of a geometry object — determine_dims","text":"Given sfc sfg object determine dimensions represented.","code":""},{"path":"/reference/determine_dims.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Determine the dimensions of a geometry object — determine_dims","text":"","code":"determine_dims(x)  has_m(x)  has_z(x)"},{"path":"/reference/determine_dims.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Determine the dimensions of a geometry object — determine_dims","text":"x object class sfc sfg","code":""},{"path":"/reference/determine_dims.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Determine the dimensions of a geometry object — determine_dims","text":"determine_dims() returns scalar character value \"xy\", \"xyz\", \"xyzm\" depending dimensions represented. has_m() has_z() returns logical scalar TRUE FALSE geometry Z M dimension.","code":""},{"path":"/reference/determine_dims.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Determine the dimensions of a geometry object — determine_dims","text":"","code":"geo <- sf::st_read(system.file(\"shape/nc.shp\", package=\"sf\"), quiet = TRUE)[[\"geometry\"]]  determine_dims(geo) #> [1] \"xy\" has_z(geo) #> [1] FALSE has_m(geo) #> [1] FALSE"},{"path":"/reference/determine_esri_geo_type.html","id":null,"dir":"Reference","previous_headings":"","what":"Determine Esri Geometry type — determine_esri_geo_type","title":"Determine Esri Geometry type — determine_esri_geo_type","text":"Takes sf sfc object returns appropriate Esri geometry type.","code":""},{"path":"/reference/determine_esri_geo_type.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Determine Esri Geometry type — determine_esri_geo_type","text":"","code":"determine_esri_geo_type(x)"},{"path":"/reference/determine_esri_geo_type.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Determine Esri Geometry type — determine_esri_geo_type","text":"x object class data.frame, sf, sfc, sfg.","code":""},{"path":"/reference/determine_esri_geo_type.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Determine Esri Geometry type — determine_esri_geo_type","text":"returns character scalar corresponding Esri geometry type","code":""},{"path":"/reference/determine_esri_geo_type.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Determine Esri Geometry type — determine_esri_geo_type","text":"Alternatively, #' ### Geometry type mapping POINT:  esriGeometryPoint MULTIPOINT:  esriGeometryMultipoint LINESTRING:  esriGeometryPolyline MULTILINESTRING:  esriGeometryPolyline POLYGON:  esriGeometryPolygon MULTIPOLYGON:  esriGeometryPolygon","code":""},{"path":"/reference/determine_esri_geo_type.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Determine Esri Geometry type — determine_esri_geo_type","text":"","code":"determine_esri_geo_type(sf::st_point(c(0, 0))) #> [1] \"esriGeometryPoint\""},{"path":"/reference/esri_geometry.html","id":null,"dir":"Reference","previous_headings":"","what":"Create Esri geometry objects — as_esri_geometry","title":"Create Esri geometry objects — as_esri_geometry","text":"functions convert R objects Esri json representations. three types representations. , smallest largest, geometry object, feature feature set.","code":""},{"path":"/reference/esri_geometry.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create Esri geometry objects — as_esri_geometry","text":"","code":"as_esri_geometry(x, crs = 4326, ...)  as_esri_features(x, ...)  as_esri_featureset(x, ...)  as_geometry(x, crs, ...)  as_features(x, ...)  as_featureset(x, ...)"},{"path":"/reference/esri_geometry.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create Esri geometry objects — as_esri_geometry","text":"x sf sfc class object crs coordinate reference system FeatureSet. Must interpretable sf::st_crs() ... additional arguments passed methods.","code":""},{"path":"/reference/esri_geometry.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create Esri geometry objects — as_esri_geometry","text":"json Esri geometry object","code":""},{"path":"/reference/esri_geometry.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Create Esri geometry objects — as_esri_geometry","text":"_esri_ infix indicates input object converted directly Esri JSON representation. _esri_ infix, object converted appropriate list structure requiring jsonify::to_json(x, unbox = TRUE) convert Esri JSON. as_esri_geometry() converts sfg object geometry object as_esri_features() converts sfc sf object list features as_esri_featureset() converts sf, sfc, data.frame feature set object Geometry object contain coordinates geometry. Features geometries associated attributes . similar row sf object. FeatureSets list features additional metadata fields spatialReference, geomtryType, fields. FeatureSets correspond sf object. Geometry objects defined 5 different types. : Point: esriGeometryPoint Multipoint: esriGeometryMultipoint Polyline: esriGeometryPolyline note polyline encompasses LINESTRING MULTILINESTRING Polygon: esriGeometryPolygon note polygon encompasses POLYGON MULTIPOLYGON Envelope: esriGeometryEnvelope envelopes correspond bounding boxes can Z dimension Field handling: Vectors inherit Date POSIXt converted milliseconds since Unix epoch UTC timezone using date_to_ms(). factors converted character vectors using .character() match behavior infer_esri_type() defines type mapping Esri field types R vector classes.","code":""},{"path":"/reference/esri_geometry.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create Esri geometry objects — as_esri_geometry","text":"","code":"library(sf) #> Linking to GEOS 3.10.2, GDAL 3.4.1, PROJ 8.2.1; sf_use_s2() is TRUE as_esri_geometry(st_point(c(0, 1, 3, 4))) #> Registered S3 method overwritten by 'jsonify': #>   method     from     #>   print.json jsonlite #> {\"hasZ\":true,\"hasM\":true,\"x\":0.0,\"y\":1.0,\"z\":3.0,\"m\":4.0,\"spatialReference\":{\"wkid\":4326}} as_esri_geometry(st_multipoint(x = matrix(runif(4), ncol = 2))) #> {\"hasZ\":false,\"hasM\":false,\"points\":[[0.40862819785252216,0.014923996990546584],[0.22178249480202795,0.28630103706382217]],\"spatialReference\":{\"wkid\":4326}} as_esri_geometry(st_linestring(x = matrix(runif(2), ncol = 2))) #> {\"hasZ\":false,\"hasM\":false,\"paths\":[[0.8985922704450786,0.33263484574854376]],\"spatialReference\":{\"wkid\":4326}} as_esri_geometry(st_linestring(x = matrix(runif(2), ncol = 2))) #> {\"hasZ\":false,\"hasM\":false,\"paths\":[[0.8278604936785996,0.5013406816869974]],\"spatialReference\":{\"wkid\":4326}}  # polygon m <- matrix(   c(0, 0, 0, 0, 0, 1, 0, 1, 1, 1, 2, 2, 1, 2, 3, 1, 3, 2, 0, 0, 0),   ncol = 3,   byrow = TRUE ) as_esri_geometry(st_polygon(list(m))) #> {\"hasZ\":true,\"hasM\":false,\"rings\":[[[0.0,0.0,0.0],[0.0,0.0,1.0],[0.0,1.0,1.0],[1.0,2.0,2.0],[1.0,2.0,3.0],[1.0,3.0,2.0],[0.0,0.0,0.0]]],\"spatialReference\":{\"wkid\":4326}}"},{"path":"/reference/field_mapping.html","id":null,"dir":"Reference","previous_headings":"","what":"Esri field type mapping — infer_esri_type","title":"Esri field type mapping — infer_esri_type","text":"Infers Esri field types R objects.","code":""},{"path":"/reference/field_mapping.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Esri field type mapping — infer_esri_type","text":"","code":"infer_esri_type(.data)  remote_ptype_tbl(fields)  get_ptype(field_type)"},{"path":"/reference/field_mapping.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Esri field type mapping — infer_esri_type","text":".data object class data.frame. fields data.frame containing, least, columns type name. Typically retrieved field metadata frome FeatureLayer Table. Also can use output infer_esri_type(). field_type character desired Esri field type. See details .","code":""},{"path":"/reference/field_mapping.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Esri field type mapping — infer_esri_type","text":"get_pytpe() returns object class prototype. infer_esri_ptype() returns data.frame columns name, type, alias, nullable, editable columns resembles fields returned FeatureService","code":""},{"path":"/reference/field_mapping.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Esri field type mapping — infer_esri_type","text":"get_ptype() takes scalar character containing Esri field type returns prototype pertinent R type infer_esri_type() takes data frame-like object infers Esri field type . remote_ptype_tbl() takes data frame fields derived list_fields() creates lazy table proto type intended used dbplyr integration","code":""},{"path":"/reference/field_mapping.html","id":"field-type-mapping-","dir":"Reference","previous_headings":"","what":"Field type mapping:","title":"Esri field type mapping — infer_esri_type","text":"Esri field types mapped esriFieldTypeSmallInteger: integer esriFieldTypeSingle: double esriFieldTypeGUID: integer esriFieldTypeOID: integer esriFieldTypeInteger: integer esriFieldTypeBigInteger: double esriFieldTypeDouble: double esriFieldTypeString: character esriFieldTypeDate: date R types mapped double: esriFieldTypeDouble integer: esriFieldTypeInteger character: esriFieldTypeString date: esriFieldTypeDate raw: esriFieldTypeBlob","code":""},{"path":"/reference/field_mapping.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Esri field type mapping — infer_esri_type","text":"","code":"get_ptype(\"esriFieldTypeDouble\") #> [1] 0  infer_esri_type(iris) #>                      name                type        alias length nullable #> Sepal.Length Sepal.Length esriFieldTypeDouble Sepal.Length     NA     TRUE #> Sepal.Width   Sepal.Width esriFieldTypeDouble  Sepal.Width     NA     TRUE #> Petal.Length Petal.Length esriFieldTypeDouble Petal.Length     NA     TRUE #> Petal.Width   Petal.Width esriFieldTypeDouble  Petal.Width     NA     TRUE #> Species           Species esriFieldTypeString      Species    255     TRUE #>              editable #> Sepal.Length     TRUE #> Sepal.Width      TRUE #> Petal.Length     TRUE #> Petal.Width      TRUE #> Species          TRUE"},{"path":"/reference/layer_json.html","id":null,"dir":"Reference","previous_headings":"","what":"Create Esri layer objects — as_layer","title":"Create Esri layer objects — as_layer","text":"functions used generate list objects can converted json objects used REST API requests. Notably used adding R objects items portal.","code":""},{"path":"/reference/layer_json.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create Esri layer objects — as_layer","text":"","code":"as_layer(   x,   name,   title,   layer_definition = as_layer_definition(x, name, \"object_id\", infer_esri_type(x)),   id = NULL,   layer_url = NULL,   legend_url = NULL,   popup_info = NULL )  as_layer_definition(   x,   name,   object_id_field,   fields = infer_esri_type(x),   display_field = NULL,   drawing_info = NULL,   has_attachments = FALSE,   max_scale = 0,   min_scale = 0,   templates = NULL,   type_id_field = NULL,   types = NULL )  as_feature_collection(layers = list(), show_legend = TRUE)"},{"path":"/reference/layer_json.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create Esri layer objects — as_layer","text":"x object class data.frame. can sf object tibble subclass data.frame. name scalar character name layer. Must unique. title user-friendly string title layer can used table contents. layer_definition layer definition list created as_layer_definition(). default derived x name object. id number indicating index position layer WMS map service. layer_url default NULL. string URL service used queries layer. Used hosted tiled map services ArcGIS Online associated feature service allows queries. legend_url default NULL. string URL legend graphic layer. Used WMS layers. URL usually contains GetLegendGraphic request. popup_info default NULL. list can converted popupInfo object defining pop-window content layer. helper popupInfo objects. object_id_field scalar character vector indicating name object ID field dataset. fields data.frame describing fields x. values inferred default via infer_esri_type(). display_field default NULL. scalar character containing name field best summarizes feature. Values field used default titles pop-windows. drawing_info default NULL. See REST documentation details . helpers validators drawingInfo objects. has_attachments default FALSE. max_scale default NULL. number representing maximum scale layer definition applied. number scale's denominator; thus, value 2400 represents scale 1/2,400. value 0 indicates layer definition applied regardless far zoom . min_scale default NULL. number representing minimum scale layer definition applied. templates default NULL. See REST documentation details . type_id_field default NULL. See REST documentation details . types array type objects available dataset. used type_id_field populated. NOTE helper functions create type objects. type list objects must match json structure passed jsonify::to_json(x, unbox = TRUE). layers list layers created as_layer(). show_legend default FALSE. Logical scalar indicating layer shown legend client applications.","code":""},{"path":"/reference/layer_json.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create Esri layer objects — as_layer","text":"list object containing required fields respective json type. results can converted json using jsonify::to_json(x, unbox = TRUE)","code":""},{"path":"/reference/layer_json.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Create Esri layer objects — as_layer","text":"featureCollection defines layer features stored web map. consists array layers. layer contains features (attributes geometries) featureSet (see as_featureset()) additional metadata stored layerDefinitionobject. layerDefinition importantly documents fields object, object ID, additional metadata name, title, display scale. Additional documentation json object: layer layerDefinition featureCollection","code":""},{"path":[]},{"path":"/reference/layer_json.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create Esri layer objects — as_layer","text":"","code":"ld <- as_layer_definition(iris, \"iris\", \"objectID\") l <- as_layer(iris, \"iris name\", \"Iris Title\") fc <- as_feature_collection(layers = list(l))"},{"path":"/reference/parse_esri_json.html","id":null,"dir":"Reference","previous_headings":"","what":"Parse Esri JSON — parse_esri_json","title":"Parse Esri JSON — parse_esri_json","text":"Parses string Esri JSON appropriate type. geometry data.frame returned. geometry, sf object returned.","code":""},{"path":"/reference/parse_esri_json.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Parse Esri JSON — parse_esri_json","text":"","code":"parse_esri_json(string, ...)"},{"path":"/reference/parse_esri_json.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Parse Esri JSON — parse_esri_json","text":"string raw Esri JSON string. ... additional arguments passed RcppSimdJson::fparse","code":""},{"path":"/reference/parse_esri_json.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Parse Esri JSON — parse_esri_json","text":"data.frame. geometry found, returns sf object.","code":""},{"path":"/reference/parse_esri_json.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Parse Esri JSON — parse_esri_json","text":"","code":"esri_json <- '{     \"geometryType\": \"esriGeometryPolygon\",     \"spatialReference\": {         \"wkid\": 4326     },     \"hasZ\": false,     \"hasM\": false,     \"features\": [         {             \"attributes\": {                 \"id\": 1             },             \"geometry\": {                 \"rings\": [                     [                         [0.0, 0.0],                         [1.0, 0.0],                         [1.0, 1.0],                         [0.0, 1.0],                         [0.0, 0.0]                     ]                 ]             }         }     ] }'  parse_esri_json(esri_json) #> Simple feature collection with 1 feature and 1 field #> Geometry type: MULTIPOLYGON #> Dimension:     XY #> Bounding box:  xmin: 0 ymin: 0 xmax: 1 ymax: 1 #> Geodetic CRS:  WGS 84 #>   id                       geometry #> 1  1 MULTIPOLYGON (((0 0, 1 0, 1..."},{"path":"/reference/requests.html","id":null,"dir":"Reference","previous_headings":"","what":"Retrieve metadata — requests","title":"Retrieve metadata — requests","text":"Utility functions feature service metadata.","code":""},{"path":"/reference/requests.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Retrieve metadata — requests","text":"","code":"fetch_layer_metadata(request, token)  count_features(request, token)"},{"path":"/reference/requests.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Retrieve metadata — requests","text":"request httr2::request object. base_req object created provided feature / server url token scalar string access_token e.g. auth_code() auth_client().","code":""},{"path":"/reference/requests.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Retrieve metadata — requests","text":"fetch_layer_metadata() returns list object count_features() returns scalar integer","code":""},{"path":"/reference/requests.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Retrieve metadata — requests","text":"fetch_layer_metadata() given request, fetches metadata setting query parameter f=json count_features() simple helper returns total number features feature service ignoring saved query parameters.","code":""},{"path":"/reference/requests.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Retrieve metadata — requests","text":"","code":"# url is broken into parts to fit within 100 characters to avoid CRAN notes url_parts <- c(   \"https://services.arcgis.com/P3ePLMYs2RVChkJx/ArcGIS/rest/services\",   \"/USA_Counties_Generalized_Boundaries/FeatureServer/0\" )  furl <- paste0(url_parts, collapse = \"\") req <- httr2::request(furl) meta <- fetch_layer_metadata(req, \"\") head(names(meta)) #> [1] \"currentVersion\" \"id\"             \"name\"           \"type\"           #> [5] \"serviceItemId\"  \"cacheMaxAge\"    count_features(req, \"\") #> [1] 3143"},{"path":"/reference/utilities.html","id":null,"dir":"Reference","previous_headings":"","what":"General utility functions — compact","title":"General utility functions — compact","text":"General utility functions","code":""},{"path":"/reference/utilities.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"General utility functions — compact","text":"","code":"compact(.x)  a %||% b"},{"path":"/reference/utilities.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"General utility functions — compact","text":".x list R object b R object","code":""},{"path":"/reference/utilities.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"General utility functions — compact","text":"compact() list %||% first non-null item NULL NULL","code":""},{"path":"/reference/utilities.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"General utility functions — compact","text":"compact() removes NULL list elements %||% special pipe operator returns b NULL","code":""},{"path":"/reference/utilities.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"General utility functions — compact","text":"","code":"# remove null elements compact(list(a = NULL, b = 1)) #> $b #> [1] 1 #>   # if NULL return rhs NULL %||% 123 #> [1] 123  # if not NULL return lhs 123 %||% NULL #> [1] 123"},{"path":"/reference/validate_crs.html","id":null,"dir":"Reference","previous_headings":"","what":"Validate CRS object — validate_crs","title":"Validate CRS object — validate_crs","text":"Takes representation CRS ensures valid one. CRS validated using sf::st_crs() validated, null CRS returned.","code":""},{"path":"/reference/validate_crs.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Validate CRS object — validate_crs","text":"","code":"validate_crs(crs)"},{"path":"/reference/validate_crs.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Validate CRS object — validate_crs","text":"crs representation coordinate reference system.","code":""},{"path":"/reference/validate_crs.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Validate CRS object — validate_crs","text":"Returns list length 1 element named spatialReference named list. provided CRS returns valid well-known ID (WKID) spatialReference contains named element called wkid integer value WKID. WKID known CRS returned valid well-known text representation wkid field NA another field wkt contains valid wkt.","code":""},{"path":"/reference/validate_crs.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Validate CRS object — validate_crs","text":"See sf::st_crs() details valid representations.","code":""},{"path":"/reference/validate_crs.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Validate CRS object — validate_crs","text":"","code":"# using epsg code integer or string representation validate_crs(3857) #> $spatialReference #> $spatialReference$wkid #> [1] 3857 #>  #>  validate_crs(\"EPSG:4326\") #> $spatialReference #> $spatialReference$wkid #> [1] 4326 #>  #>   # using a custom proj4 string proj4string <- \"+proj=longlat +datum=WGS84 +no_defs\"  crs <- validate_crs(proj4string)  # using wkt2 (from above result) crs <- validate_crs(crs$spatialReference$wkt)"},{"path":"/news/index.html","id":"arcgisutils-010","dir":"Changelog","previous_headings":"","what":"arcgisutils 0.1.0","title":"arcgisutils 0.1.0","text":"Initial release","code":""}]
